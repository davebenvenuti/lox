package com.craftinginterpreters.lox

// THIS FILE IS AUTOGENERATED BY generate-ast, DO NOT EDIT!

sealed class Expr {
    interface Visitor<R> {
        fun visitAssignExpr(assign: Assign): R
        fun visitBinaryExpr(binary: Binary): R
        fun visitGroupingExpr(grouping: Grouping): R
        fun visitLiteralExpr(literal: Literal): R
        fun visitUnaryExpr(unary: Unary): R
        fun visitVariableExpr(variable: Variable): R
    }

    data class Assign(
        val name : Token,
        val value : Expr
    ) : Expr() {
        override fun <R> accept(visitor: Visitor<R>): R {
            return visitor.visitAssignExpr(this)
        }
    }
    
    data class Binary(
        val left : Expr,
        val operator : Token,
        val right : Expr
    ) : Expr() {
        override fun <R> accept(visitor: Visitor<R>): R {
            return visitor.visitBinaryExpr(this)
        }
    }
    
    data class Grouping(
        val expression : Expr
    ) : Expr() {
        override fun <R> accept(visitor: Visitor<R>): R {
            return visitor.visitGroupingExpr(this)
        }
    }
    
    data class Literal(
        val value : Any?
    ) : Expr() {
        override fun <R> accept(visitor: Visitor<R>): R {
            return visitor.visitLiteralExpr(this)
        }
    }
    
    data class Unary(
        val operator : Token,
        val right : Expr
    ) : Expr() {
        override fun <R> accept(visitor: Visitor<R>): R {
            return visitor.visitUnaryExpr(this)
        }
    }
    
    data class Variable(
        val name : Token
    ) : Expr() {
        override fun <R> accept(visitor: Visitor<R>): R {
            return visitor.visitVariableExpr(this)
        }
    }
    

    abstract fun <R> accept(visitor: Visitor<R>): R
}
